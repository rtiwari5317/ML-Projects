# -*- coding: utf-8 -*-
"""Predicting Customer Churn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IKpb9Ng_f24sesInHv8TcWbrTHLtzIy8
"""

#Importing necessary Libraries
import numpy as np
import pandas as pd
import io
import sklearn

#Uploading dataset from local
from google.colab import files
dataset = files.upload()

#print(type(dataset))
dataset

#Decoding the uploaded dataset accordingly with the help of io Library and decode function
df = pd.read_csv(io.StringIO(dataset["churn.csv"].decode("utf-8")))
df.head()

"""# New Section"""

#Shape of our Churn Dataset
df.shape

#Basic Statistical Analysis of our Churn Dataset :
df.describe()

#Check for Value counts w.r.t different Dataset columns:
#Listing out column names present in the dataset
df.columns.values

#df['gender'].value_counts()
df['MultipleLines'].value_counts()
#Balanced data set of customers based on Gender Category.

df['Churn'].value_counts()
#Here we can see almost 30% of customers churning out.

#Evaluate % of the Customers Churning Out?
df_churned = df[df['Churn'] == 'Yes'].shape[0]  #1869
df_retained = df[df['Churn'] == 'No'].shape[0]  #5174
df_churned_prcnt = round((df_churned*100)/(df_churned+df_retained),2)
print(df_churned_prcnt ,'% opted out of total customers from Bank')

df_retained_prcnt = round((df_retained*100)/(df_churned+df_retained),2)
print(df_retained_prcnt, '% of the total Customers retained with the Bank')

#Data Pre-Processing 
#Handling Missing Values -> Dropping Irrelevant Columns -> Convert String Columns to Integers -> Feature Scaling -> Train Test Split
df.isnull().sum()
#Data Insight -> There are no Missing values in the dataset.

df.columns.values

#CustomerID is the only column which can be dropped since it has least/0 impact on deciding whether the customer will be retained or churned out.
df_new = df.drop('customerID',axis = 1)
df_new.head()

#Converting Categorical String Columns like  Partner,Dependents,PhoneService etc...
from sklearn.preprocessing import LabelEncoder
for i in df_new.columns:
  if df_new[i].dtype == np.number:
    continue
  df_new[i] = LabelEncoder().fit_transform(df_new[i])

df_new.head()
#Now all the non-numeric columns are transformed using Label Encoding technique.

#Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X = df_new.drop('Churn', axis=1)
y = df_new['Churn']

X = sc.fit_transform(X)

#Train Test Split
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.10,random_state = 0)

#Building and Training the Model
from sklearn.linear_model import LogisticRegression
cls = LogisticRegression()

cls.fit(X_train,y_train)

#Making Predictions on test data set:
y_pred = cls.predict(X_test)
print(y_pred)

#Evaluating the precision, recall, f1-scores and overall Accuracy of Our Model:
from sklearn.metrics import classification_report
print(classification_report(y_test,y_pred))

"""And this Completes our project on Predicting Customer Churn for our dataset where we achieved 79% Accuracy to predict whether the Customer is opting out or will continue with Organization's Services..."""